apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ template "app.chartname" . }}"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
    app.kubernetes.io/instance: {{ include "app.revision" . }}
    app.kubernetes.io/part-of: rse
    {{ include "app.istioLabels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "app.labels" . | nindent 8 }}
      annotations:
        {{- include "app.metricsAnnotations" . | nindent 8 }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      securityContext:
{{- include "app.securitycontext" . | nindent 8 }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecrets }}
      {{- end }}
      containers:
      - name: {{ template "app.chartname" . }}
        image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ default .Chart.AppVersion .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{- if and .Values.ingress.tls (gt (len .Values.ingress.tls) 0) }}
        command: 
          - /bin/sh
        args:
          - -c
          - |
            for f in /opt/{{ .Values.name }}/certs/*.crt; do 
              echo "Adding certificate $f to keystore"
              certname=$(echo $(basename $f) | sed 's|.crt||g' )
              keytool -import -trustcacerts -noprompt -storepass changeit -alias $(basename $f) -file $f -keystore ${JAVA_HOME}/lib/security/cacerts
            done
            
            # Workaroud for IDP Kit not able to create this folder when resolvivng DID
            mkdir -p ${WALTID_DATA_ROOT:-/waltid/idp}/data/tenants/VERIFIER/default

            echo "Starting IDP API"
            JAVA_OPTS='-Dorg.slf4j.simpleLogger.log.id.walt=DEBUG' /app/bin/waltid-idpkit run
        {{- end }}
        {{- if .Values.useSecretRef }}
        envFrom:
          - secretRef:
            name: {{ .Values.secretRefName }}
        {{- else if .Values.useConfigMap }}
        envFrom:
          - configMapRef:
              name: {{ .Values.configMapName }}
        {{- else }}
        env:
        - name: WALTID_DATA_ROOT
          value: "/waltid/idp"
        - name: KEYCLOAK_URL
          value: "https://dataspace4health.local/iam"
        - name: KEYCLOAK_REALM
          value: "ds4h"
        - name: KEYCLOAK_CLIENT_ID
          value: "federated-catalogue"
        - name: KEYCLOAK_DEFAULT_GROUP # Default Group to be set
          value: "did:web:portal.dataspace4health.lu:wallet:api:wallet-api:registry:lih"
        - name: KEYCLOAK_DEFAULT_ROLE # Default Group to be set if not Role please set this NO_ROLE availebal roles for FC: Ro-SD-A, Ro-PA-A,Ro-MU-CA and Ro-MU-A
          value: "Ro-PA-A"
        - name: KEYCLOAK_ADMIN_USERNAME
          value: "admin"
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: "xfsc4Ntt!"
        {{- end }}
        {{- if .Values.secretEnv }}
          {{- range $key, $value := .Values.secretEnv }}
          - name: "{{ $key }}"
            valueFrom:
              secretRef:
                name: "{{ $value.name }}"
          {{- end }}
        {{- end }}
{{- if .Values.extraVars }}
{{ toYaml .Values.extraVars | indent 8 }}
{{- end }}
        ports:
        {{- if .Values.metrics.enabled }}
          - name: monitoring
            containerPort: {{ .Values.metrics.port }}
        {{- end }}
          - name: http
            containerPort: {{ .Values.config.http.port }}   
        # readinessProbe:
        #   httpGet:
        #     path: /api/swagger
        #     port: {{ .Values.config.http.port }}
        #   initialDelaySeconds: 5
        #   periodSeconds: 5
        #   successThreshold: 2
        #   failureThreshold: 2
        #   timeoutSeconds: 5
        volumeMounts:
          - name: idp-config
            mountPath: "/waltid/idp/config/"
            readOnly: true
          - name: idp-data
            mountPath: "/waltid/idp/data/"
          {{ $name := .Values.name }}
          {{- range .Values.ingress.tls }}
          - name: {{ .secretName | replace "." "-" }}
            mountPath: /opt/{{ $name }}/certs/{{ .secretName }}.crt
            subPath: {{ .secretName }}.crt
            readOnly: true
          {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
      volumes:
      - name: idp-config
        configMap:
          name: "{{ template "app.chartname" . }}-configmap"
      - name: idp-data
        persistentVolumeClaim:
          claimName: "{{ template "app.chartname" . }}-data"
      {{- range .Values.ingress.tls }}
      - name: {{ .secretName | replace "." "-" }}
        secret:
          secretName: {{ .secretName }}
          items:
            - key: ca.crt
              path: {{ .secretName }}.crt
          defaultMode: 420
      {{ end }}
